#BlueJ class context
comment0.params=
comment0.target=int[]\ zzUnpackAction()
comment1.params=packed\ offset\ result
comment1.target=int\ zzUnpackAction(java.lang.String,\ int,\ int[])
comment10.params=
comment10.target=boolean\ zzRefill()
comment10.text=\n\ Refills\ the\ input\ buffer.\n\n\ @return\ \ \ \ \ \ <code>false</code>,\ iff\ there\ was\ new\ input.\n\ \n\ @exception\ \ \ java.io.IOException\ \ if\ any\ I/O-Error\ occurs\n
comment11.params=
comment11.target=void\ yyclose()
comment11.text=\n\ Closes\ the\ input\ stream.\n
comment12.params=reader
comment12.target=void\ yyreset(java.io.Reader)
comment12.text=\n\ Resets\ the\ scanner\ to\ read\ from\ a\ new\ input\ stream.\n\ Does\ not\ close\ the\ old\ reader.\n\n\ All\ internal\ variables\ are\ reset,\ the\ old\ input\ stream\ \n\ <b>cannot</b>\ be\ reused\ (internal\ buffer\ is\ discarded\ and\ lost).\n\ Lexical\ state\ is\ set\ to\ <tt>ZZ_INITIAL</tt>.\n\n\ Internal\ scan\ buffer\ is\ resized\ down\ to\ its\ initial\ length,\ if\ it\ has\ grown.\n\n\ @param\ reader\ \ \ the\ new\ input\ stream\ \n
comment13.params=
comment13.target=int\ yystate()
comment13.text=\n\ Returns\ the\ current\ lexical\ state.\n
comment14.params=newState
comment14.target=void\ yybegin(int)
comment14.text=\n\ Enters\ a\ new\ lexical\ state\n\n\ @param\ newState\ the\ new\ lexical\ state\n
comment15.params=
comment15.target=java.lang.String\ yytext()
comment15.text=\n\ Returns\ the\ text\ matched\ by\ the\ current\ regular\ expression.\n
comment16.params=pos
comment16.target=char\ yycharat(int)
comment16.text=\n\ Returns\ the\ character\ at\ position\ <tt>pos</tt>\ from\ the\ \n\ matched\ text.\ \n\ \n\ It\ is\ equivalent\ to\ yytext().charAt(pos),\ but\ faster\n\n\ @param\ pos\ the\ position\ of\ the\ character\ to\ fetch.\ \n\ \ \ \ \ \ \ \ \ \ \ \ A\ value\ from\ 0\ to\ yylength()-1.\n\n\ @return\ the\ character\ at\ position\ pos\n
comment17.params=
comment17.target=int\ yylength()
comment17.text=\n\ Returns\ the\ length\ of\ the\ matched\ text\ region.\n
comment18.params=errorCode
comment18.target=void\ zzScanError(int)
comment18.text=\n\ Reports\ an\ error\ that\ occured\ while\ scanning.\n\n\ In\ a\ wellformed\ scanner\ (no\ or\ only\ correct\ usage\ of\ \n\ yypushback(int)\ and\ a\ match-all\ fallback\ rule)\ this\ method\ \n\ will\ only\ be\ called\ with\ things\ that\ "Can't\ Possibly\ Happen".\n\ If\ this\ method\ is\ called,\ something\ is\ seriously\ wrong\n\ (e.g.\ a\ JFlex\ bug\ producing\ a\ faulty\ scanner\ etc.).\n\n\ Usual\ syntax/scanner\ level\ error\ handling\ should\ be\ done\n\ in\ error\ fallback\ rules.\n\n\ @param\ \ \ errorCode\ \ the\ code\ of\ the\ errormessage\ to\ display\n
comment19.params=number
comment19.target=void\ yypushback(int)
comment19.text=\n\ Pushes\ the\ specified\ amount\ of\ characters\ back\ into\ the\ input\ stream.\n\n\ They\ will\ be\ read\ again\ by\ then\ next\ call\ of\ the\ scanning\ method\n\n\ @param\ number\ \ the\ number\ of\ characters\ to\ be\ read\ again.\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ This\ number\ must\ not\ be\ greater\ than\ yylength()\!\n
comment2.params=
comment2.target=int[]\ zzUnpackRowMap()
comment20.params=
comment20.target=java.lang.String\ nextToken()
comment20.text=\n\ Resumes\ scanning\ until\ the\ next\ regular\ expression\ is\ matched,\n\ the\ end\ of\ input\ is\ encountered\ or\ an\ I/O-Error\ occurs.\n\n\ @return\ \ \ \ \ \ the\ next\ token\n\ @exception\ \ \ java.io.IOException\ \ if\ any\ I/O-Error\ occurs\n
comment3.params=packed\ offset\ result
comment3.target=int\ zzUnpackRowMap(java.lang.String,\ int,\ int[])
comment4.params=
comment4.target=int[]\ zzUnpackTrans()
comment5.params=packed\ offset\ result
comment5.target=int\ zzUnpackTrans(java.lang.String,\ int,\ int[])
comment6.params=
comment6.target=int[]\ zzUnpackAttribute()
comment7.params=packed\ offset\ result
comment7.target=int\ zzUnpackAttribute(java.lang.String,\ int,\ int[])
comment8.params=in
comment8.target=ScannerC(java.io.Reader)
comment8.text=\n\ Creates\ a\ new\ scanner\n\n\ @param\ \ \ in\ \ the\ java.io.Reader\ to\ read\ input\ from.\n
comment9.params=packed
comment9.target=char[]\ zzUnpackCMap(java.lang.String)
comment9.text=\ \n\ Unpacks\ the\ compressed\ character\ translation\ table.\n\n\ @param\ packed\ \ \ the\ packed\ character\ translation\ table\n\ @return\ \ \ \ \ \ \ \ \ the\ unpacked\ character\ translation\ table\n
numComments=21
